---
openapi: 3.1.0
info:
  title: Movie API
  summary: This is the API of the Movie service
  description: This is the API of the Movie service longer
  contact:
    name: Helene Coullon
    url: https://helene-coullon.fr/
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - developers
      summary: home page of the service
      description: |
        Nothing to do
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1 style='color:blue'>Welcome to the Movie service!</h1>
  /json:
    get:
      tags:
      - developers
      summary: get the full JSON database
      description: |
        Nothing to do
      operationId: get_json
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMovies'
  /movies/by_id:
    get:
      tags:
      - developers
      summary: get the movie by its id
      description: By passing in the appropriate options, you can get info of a Movie
      operationId: get_movie_by_id
      parameters:
      - name: movie_id
        in: query
        description: Movie ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Movie description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
  /movies/by_title:
    get:
      tags:
      - developers
      summary: get the movie by its title
      description: |
        By passing in the appropriate options, you can get Movie info
      operationId: get_movie_by_title
      parameters:
      - name: title
        in: query
        description: pass a title
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Movie item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
  /movies/update:
    post:
      tags:
        - admins
      summary: add a movie item
      description: Adds a movie to the system
      operationId: create_movie
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieItem'
      responses:
        "200":
          description: Movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: incorrect body format
        "409":
          description: a film with the same ID already exists
    delete:
      tags:
        - admins
      summary: delete a movie item
      description: Adds a movie to the system
      operationId: del_movie
      requestBody:
        description: Inventory item to delete
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieItem'
      responses:
        "200":
          description: item deleted
        "400":
          description: incorrect body format
        "404":
          description: ID does not match any film
    put:
      tags:
        - admins
      summary: update a movie's data
      operationId: update_movie_data
      description: updates a movie's data
      requestBody:
        description: Inventory item to with data to edit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieItem'
      responses:
        '200':
          description: Movie data updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        '400':
          description: incorrect body format
        '404':
          description: ID does not match any movie
components:
  schemas:
    AllMovies:
      type: object
      required:
        - movies
      properties:
        movies:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/MovieItem'
    MovieItem:
      type: object
      required:
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: integer
          example: 7
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab


